diff --cc test/spec/iterator-spec.js
index 9ae34c9,cce9f33..0000000
--- a/test/spec/iterator-spec.js
+++ b/test/spec/iterator-spec.js
@@@ -1,202 -1,79 +1,79 @@@
  
 -var Iterator = require("../iterator");
 +var Iterator = require("collections/iterator");
+ var Iterator_ = Iterator; // For referencing things on the constructor
  
- describe("Iterator-spec", function () {
- 
-     shouldWorkWithConstructor(function withoutNew(iterable) {
+ describe("Iterator", function () {
+     describeIterator(function withoutNew(iterable) {
          return Iterator(iterable);
      });
+     //describeIterator(function withNew(iterable) {
+     //    return new Iterator(iterable);
+     //});
+ });
  
-     shouldWorkWithConstructor(function withNew(iterable) {
-         return new Iterator(iterable);
-     });
- 
-     describe("Iterator.cycle", function () {
- 
-         it("should work", function () {
-             var iterator = Iterator.cycle([1, 2, 3]);
-             for (var i = 0; i < 10; i++) {
-                 expect(iterator.next().value).toBe(1);
-                 expect(iterator.next().value).toBe(2);
-                 expect(iterator.next().value).toBe(3);
-             }
-         });
- 
-         it("should work with specified number of times", function () {
-             var iterator = Iterator.cycle([1, 2, 3], 2);
-             for (var i = 0; i < 2; i++) {
-                 expect(iterator.next().value).toBe(1);
-                 expect(iterator.next().value).toBe(2);
-                 expect(iterator.next().value).toBe(3);
-             }
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
- 
-         it("should work with specified 0 times", function () {
-             var iterator = Iterator.cycle([1, 2, 3], 0);
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
+ function expectCommonIterator(iterator) {
+     expect(Object.equals(iterator.next(), {value: 1, index: 0, done: false})).toBe(true);
+     expect(Object.equals(iterator.next(), {value: 2, index: 1, done: false})).toBe(true);
+     expect(Object.equals(iterator.next(), {value: 3, index: 2, done: false})).toBe(true);
+     expect(Object.equals(iterator.next(), {value: undefined, index: undefined, done: true})).toBe(true);
+     expect(Object.equals(iterator.next(), {value: undefined, index: undefined, done: true})).toBe(true);
+ }
  
-         it("should work with specified -1 times", function () {
-             var iterator = Iterator.cycle([1, 2, 3], 0);
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
+ function describeIterator(Iterator) {
  
+     it("iterates undefined (empty) iteration", function () {
+         var iterator = Iterator();
+         expect(iterator.next()).toEqual({value: undefined, done: true});
      });
  
-     describe("Iterator.repeat", function () {
- 
-         it("should repeat a value indefinite times by default", function () {
-             var iterator = Iterator.repeat(1);
-             for (var i = 0; i < 10; i++) {
-                 expect(iterator.next().value).toEqual(1);
-             }
-         });
- 
-         it("should repeat a value specified times", function () {
-             var iterator = Iterator.repeat(1, 3);
-             for (var i = 0; i < 3; i++) {
-                 expect(iterator.next().value).toEqual(1);
-             }
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
- 
+     it("iterates null (empty) iteration", function () {
+         var iterator = Iterator(null);
+         expect(iterator.next()).toEqual({value: undefined, done: true});
      });
  
-     describe("Iterator.concat", function () {
-         it("should work", function () {
-             var iterator = Iterator.concat([
-                Iterator([1, 2, 3]),
-                Iterator([4, 5, 6]),
-                Iterator([7, 8, 9])
-             ]);
-             for (var i = 0; i < 9; i++) {
-                 expect(iterator.next().value).toEqual(i + 1);
-             }
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
-     });
- 
-     describe("Iterator.chain", function () {
-         it("should work", function () {
-             var iterator = Iterator.chain(
-                Iterator([1, 2, 3]),
-                Iterator([4, 5, 6]),
-                Iterator([7, 8, 9])
-             );
-             for (var i = 0; i < 9; i++) {
-                 expect(iterator.next().value).toEqual(i + 1);
-             }
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
+     it("iterates empty array iteration", function () {
+         var iterator = Iterator([]);
+         expect(iterator.next()).toEqual({value: undefined, done: true});
      });
  
-     describe("Iterator.unzip", function () {
-         it("should work", function () {
-             var iterator = Iterator.unzip([
-                 Iterator([0, 'A', 'x']),
-                 Iterator([1, 'B', 'y', 'I']),
-                 Iterator([2, 'C'])
-             ]);
- 
-             expect(iterator.next().value).toEqual([0, 1, 2]);
-             expect(iterator.next().value).toEqual(['A', 'B', 'C']);
- 
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
+     it("iterates empty object iteration", function () {
+         var iterator = Iterator({});
+         expect(iterator.next()).toEqual({value: undefined, done: true});
      });
  
-     describe("Iterator.zip", function () {
-         it("should work", function () {
-             var iterator = Iterator.zip(
-                 Iterator([0, 'A', 'x']),
-                 Iterator([1, 'B', 'y', 'I']),
-                 Iterator([2, 'C'])
-             );
- 
-             expect(iterator.next().value).toEqual([0, 1, 2]);
-             expect(iterator.next().value).toEqual(['A', 'B', 'C']);
- 
-             expect(iterator.next().done).toBe(true);
-             expect(iterator.next().done).toBe(true);
-         });
+     it("iterates an array", function () {
+         var iterator = Iterator([1, 2, 3]);
+         expectCommonIterator(iterator);
      });
  
-     describe("Iterator.range", function () {
+     it("iterates a sparse array", function () {
+         var iterator = Iterator([1,, 2,, 3]);
+         expect(Object.equals(iterator.next(), {value: 1, index: 0, done: false})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: 2, index: 2, done: false})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: 3, index: 4, done: false})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: undefined, index: undefined, done: true})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: undefined, index: undefined, done: true})).toBe(true);
      });
  
-     describe("Iterator.count", function () {
+     it("iterates an object", function () {
+         var iterator = Iterator({a: 10, b: 20, c: 30});
+         expect(iterator.next()).toEqual({value: 10, index: "a", done: false});
+         expect(iterator.next()).toEqual({value: 20, index: "b", done: false});
+         expect(iterator.next()).toEqual({value: 30, index: "c", done: false});
+         expect(iterator.next()).toEqual({value: undefined, index: undefined, done: true});
+         expect(iterator.next()).toEqual({value: undefined, index: undefined, done: true});
      });
  
- });
- 
- function shouldWorkWithConstructor(Iterator) {
- 
-     function definiteIterator() {
-         return Iterator([1, 2, 3]);
-     }
- 
-     function indefiniteIterator() {
-         var n = 0;
-         return Iterator(function () {
-             return {
-                 done: false,
-                 value: n++
-             };
-         });
-     }
- 
-     it("should iterate an array", function () {
-         var iterator = Iterator([1, 2, 3]);
-         expect(iterator.next().value).toEqual(1);
-         expect(iterator.next().value).toEqual(2);
-         expect(iterator.next().value).toEqual(3);
-         expect(iterator.next().done).toBe(true);
-         expect(iterator.next().done).toBe(true);
-     });
- 
-     it("should iterate an sparse array", function () {
-         var array = [];
-         array[0] = 1;
-         array[100] = 2;
-         array[1000] = 3;
-         var iterator = Iterator(array);
-         expect(iterator.next().value).toEqual(1);
-         expect(iterator.next().value).toEqual(2);
-         expect(iterator.next().value).toEqual(3);
-         expect(iterator.next().done).toBe(true);
-         expect(iterator.next().done).toBe(true);
-     });
- 
-     it("should iterate a string", function () {
+     it("iterates a string", function () {
          var iterator = Iterator("abc");
-         expect(iterator.next().value).toEqual("a");
-         expect(iterator.next().value).toEqual("b");
-         expect(iterator.next().value).toEqual("c");
-         expect(iterator.next().done).toBe(true);
-         expect(iterator.next().done).toBe(true);
+         expect(Object.equals(iterator.next(), {value: "a", index: 0, done: false})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: "b", index: 1, done: false})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: "c", index: 2, done: false})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: undefined, index: undefined, done: true})).toBe(true);
+         expect(Object.equals(iterator.next(), {value: undefined, index: undefined, done: true})).toBe(true);
      });
  
-     it("should gracefully fail to iterate null", function () {
-         expect(function () {
-             Iterator(null);
-         }).toThrow();
-     });
- 
-     it("should gracefully fail to iterate undefined", function () {
-         expect(function () {
-             Iterator();
-         }).toThrow();
-     });
- 
-     it("should gracefully fail to iterate a number", function () {
+     it("fails to iterate a number", function () {
          expect(function () {
              Iterator(42);
          }).toThrow();
